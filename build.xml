	
<project name="WSML2Reasoner Framework" default="create-jar" basedir="." >

	<!-- =================================================================== -->
	<!-- Initialization                                                -->
	<!-- =================================================================== -->
	<target name="init">
		<tstamp />
		<property name="target.vm" value="1.5" />

		<property name="src.dir" value="${basedir}/src" />
		<property name="api-src.dir" value="${basedir}/api/src/" />
		<property name="test-src.dir" value="${basedir}/test/" />
		<property name="lib.dir" value="${basedir}/lib" />
		<property name="example.dir" value="${src.dir}/example/" />

		<property name="build.root" value="${basedir}/build" />
		<property name="build.src" value="${build.root}/src" />
		<property name="build.lib" value="${build.root}/lib" />
		<property name="build.class" value="${build.root}/class" />
		<property name="dist" value="${basedir}/dist" />
    	<property name="dist.complete" value="${dist}/complete" />
		<property name="dist.complete.src" value="${dist.complete}/src" />
		<property name="dist.complete.lib" value="${dist.complete}/lib" />
		<property name="dist.complete.test" value="${dist.complete}/test" />
		<property name="dist.complete.example" value="${dist.complete}/example" />
		<property name="javadoc.dir" location="${basedir}/javadoc" />
		<property name="deploy.version" value="v0_5" />
		
		<!-- For updating remote snapshot -->
		<property file="pwd" />
		<property name="cvs.user" value="graham"/>
		<property name="cvs.path" value=":ext:${cvs.user}@cvs.deri.at:/usr/local/cvsroot" />
		<property name="shell.host" value="tools.deri.org" />
		<property name="remote.snapshot.path" value="/var/www/html/tools_deri_org/wsml2reasoner/snapshot/" />
		<property name="remote.snapshot.path.wsmo" value="${remote.snapshot.path}/wsml2reasoner-wsmo/" />
		<property name="remote.javadoc.path" value="/var/www/html/tools_deri_org/wsml2reasoner/javadoc/" />
	</target>
	
	<!-- =================================================================== -->
	<!-- Targets                                                       		 -->
	<!-- =================================================================== -->

	<patternset id="source-files">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="build/*" />
		<include name="**/*.*" />
	</patternset>
		
	<patternset id="all-jars">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="build/*" />
		<exclude name="wsml2reasoner-*.jar" />
		<include name="**/*.*" />
	</patternset>
			
	<patternset id="minimal-wsmo-jars">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="build/*" />
		<include name="ext/minimal-libs/wsmo4j/" />
	</patternset>
	
	<!--Currently, DL and Pellet jars are the same
		until we integrate another DL reasoner -->
	
	<patternset id="pellet-jars">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<include name="ext/minimal-libs/**"/>
		<include name="ext/pellet-reasoner/**"/>
	</patternset>
	
	<patternset id="iris-jars">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<include name="ext/minimal-libs/wsmo4j/"/>
		<include name="ext/iris-reasoner/"/>
	</patternset>
	
	<patternset id="mins-jars">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<include name="ext/minimal-libs/wsmo4j/"/>
		<include name="ext/mins-reasoner/"/>
	</patternset>
	
	<patternset id="sdk-files">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="bin/**" />
		<exclude name="build/**" />
		<exclude name="dist/**" />
		<exclude name="ext/**" />
		<exclude name="pub/**" />
		<exclude name="web/**" />
		<!--<excludesfile name="pwd" />-->
		<include name="**/*.*" />
	</patternset>
	
	<patternset id="dl-files">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="example/IrisDBReasonerExample.java" />
		<exclude name="example/IrisReasonerExample.java" />
		<exclude name="example/Kaon2ReasonerExample.java" />
		<exclude name="example/MinsReasonerExample.java" />
		<exclude name="example/ReasonerExample.java" />
		<exclude name="example/humanOntology.wsml" />
		<include name="**/*.*" />
	</patternset>
	
	<patternset id="datalog-files">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />	
		<exclude name="example/Kaon2DLReasonerExample.java" />
		<exclude name="example/PelletReasonerExample.java" />
		<exclude name="example/wsml2owlExample.wsml" />
		<include name="**/*.*" />
	</patternset>
	
	<patternset id="pellet-files">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="example/IrisDBReasonerExample.java" />
		<exclude name="example/IrisReasonerExample.java" />
		<exclude name="example/Kaon2DLReasonerExample.java" />
		<exclude name="example/Kaon2ReasonerExample.java" />
		<exclude name="example/MinsReasonerExample.java" />
		<exclude name="example/ReasonerExample.java" />
		<exclude name="example/humanOntology.wsml" />
		<include name="**/*.*" />
	</patternset>
		
	<patternset id="iris-files">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="example/Kaon2DLReasonerExample.java" />
		<exclude name="example/Kaon2ReasonerExample.java" />
		<exclude name="example/MinsReasonerExample.java" />
		<exclude name="example/PelletReasonerExample.java" />
		<exclude name="example/wsml2owlExample.wsml" />
		<include name="**/*.*" />
	</patternset>
	
	<patternset id="mins-files">
		<exclude name="CVS/*" />
		<exclude name="*.DS_Store" />
		<exclude name="example/IrisDBReasonerExample.java" />
		<exclude name="example/IrisReasonerExample.java" />
		<exclude name="example/Kaon2DLReasonerExample.java" />
		<exclude name="example/Kaon2ReasonerExample.java" />
		<exclude name="example/PelletReasonerExample.java" />
		<exclude name="example/wsml2owlExample.wsml" />
		<include name="**/*.*" />
	</patternset>


	<path id="classpath">
		<fileset dir="build/lib" includes="**/*.jar"/>
	</path>
			
	<target name="clean-dist.complete-dir" depends="init" description="Cleans the dist.complete directory">
		<delete dir="${dist.complete}" />
	</target>
	
	<target name="clean-build-dirs" depends="init" description="Cleans the build directories">
		<delete dir="${build.src}" />
		<delete dir="${build.lib}" />
		<delete dir="${build.class}" />
	</target>
	
	<target name="real-clean" depends="clean-build-dirs" description="Cleans everything">
		<delete dir="${build.root}" />
	</target>
	
	<target name="create-dirs" depends="init" description="Creates the build directories">
		<mkdir dir="${build.root}" />
		<mkdir dir="${build.src}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${build.class}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${dist.complete}" />		
		<mkdir dir="${dist.complete.lib}" />
	</target>
	
	<target name="compile" depends="real-clean, create-dirs" 
		description="Compiles wsml2reasoner framework">
		<copy todir="${build.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${src.dir}">
				<patternset refid="source-files" />
			</fileset>
			<fileset dir="${api-src.dir}">
				<patternset refid="source-files" />
			</fileset>
		</copy>
		<copy todir="${build.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${lib.dir}/">
				<patternset refid="all-jars" />
			</fileset>
		</copy>
		<javac srcdir="${build.src}" destdir="${build.class}" 
				debug="on" optimize="off" deprecation="off" target="1.5" nowarn="on">
			<classpath>
				<fileset dir="${build.lib}" />
			</classpath>
		</javac>
	</target>
	
	<target name="create-jar" depends="compile" description="Creates wsml2reasoner jar - basic">
		<mkdir dir="${dist.complete}" />
		<jar jarfile="${dist.complete}/wsml2reasoner-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
	</target>
	
	<target name="create-wsml2reasoner-noncom-jar+libs" depends="compile" 
		description="Creates wsml2reasoner noncommercial version (including KAON2 jars)">
		<mkdir dir="${dist.complete}" />	
		<jar jarfile="${dist.complete}/wsml2reasoner-noncom-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
		<copy todir="${dist.complete.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.lib}" >
				<patternset refid="all-jars" />
			</fileset>
		</copy>
	</target>
	
	<target name="create-wsml2reasoner-noncom-jar+libs+example" depends="create-wsml2reasoner-noncom-jar+libs" 
		description="Creates wsml2reasoner noncommercial version (including KAON2 jars)">
		<copy file="${example.dir}/KAON2ReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/KAON2DLReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/PelletReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/wsml2owlExample.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/ReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/humanOntology.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/simpleOntology.wsml" todir="${dist.complete.example}"/>
		<zip destfile="${dist}/wsml2reasoner-noncom-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-noncom-src" depends="create-wsml2reasoner-noncom-jar+libs" 
		description="Creates wsml2reasoner noncommercial version (including KAON2 jars)">
		<mkdir dir="${dist.complete.src}" />
		<copy todir="${dist.complete.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.src}" />
		</copy>
		<zip destfile="${dist}/wsml2reasoner-noncom-src-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-sdk" depends="real-clean, create-dirs" 
		description="Creates complete wsml2reasoner (including tests) for developers">
		<copy todir="${dist.complete}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${basedir}">
				<patternset refid="sdk-files" />
			</fileset>
		</copy>
		<zip destfile="${dist}/wsml2reasoner-sdk-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-jar+libs" depends="compile" 
		description="Creates wsml2reasoner-minimal (wsmo) jar + libs">
		<mkdir dir="${dist.complete}" />	
		<jar jarfile="${dist.complete}/wsml2reasoner-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
		<copy file="${basedir}/license-lgpl.txt" todir="${dist.complete}"/>
		<copy todir="${dist.complete.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.lib}">
				<patternset refid="minimal-wsmo-jars" />
			</fileset>
		</copy>
	</target>
	
	<target name="create-wsml2reasoner-jar+libs+example" depends="create-wsml2reasoner-jar+libs" 
		description="Zips wsml2reasoner-wsmo jar, libs, and example">
		<copy file="${example.dir}/ReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/humanOntology.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/simpleOntology.wsml" todir="${dist.complete.example}"/>
		<zip destfile="${dist}/wsml2reasoner-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-src" depends="create-wsml2reasoner-jar+libs" 
		description="Creates/zips wsml2reasoner src with minimal (wsmo) jars)">
		<mkdir dir="${dist.complete.src}" />
		<copy todir="${dist.complete.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.src}" />
		</copy>
		<zip destfile="${dist}/wsml2reasoner-src-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-dl-jar+libs" depends="compile" 
		description="Creates wsml2reasoner-dl jar + libs">
		<mkdir dir="${dist.complete}" />	
		<jar jarfile="${dist.complete}/wsml2reasoner-dl-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
		<copy file="${basedir}/license-lgpl.txt" todir="${dist.complete}"/>
		<copy todir="${dist.complete.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.lib}">
				<!--Currently, DL and Pellet jars are the same
				until we integrate another DL reasoner -->
				<patternset refid="pellet-jars" />
			</fileset>
		</copy>
	</target>
	
	<target name="create-wsml2reasoner-dl-jar+libs+example" depends="create-wsml2reasoner-dl-jar+libs" 
		description="Zips wsml2reasoner-dl jar, libs, and example">
		<copy file="${example.dir}/PelletReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/wsml2owlExample.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/simpleOntology.wsml" todir="${dist.complete.example}"/>
		<zip destfile="${dist}/wsml2reasoner-dl-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-dl-src" depends="create-wsml2reasoner-dl-jar+libs" 
			description="Creates/zips wsml2reasoner src with dl jars)">
		<mkdir dir="${dist.complete.src}" />
		<copy todir="${dist.complete.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.src}">
				<patternset refid="dl-files" />	
			</fileset>
		</copy>
		<zip destfile="${dist}/wsml2reasoner-dl-src-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-pellet-jar+libs" depends="compile" 
		description="Creates wsml2reasoner-pellet jar + libs">
		<mkdir dir="${dist.complete}" />	
		<jar jarfile="${dist.complete}/wsml2reasoner-pellet-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
		<copy file="${basedir}/license-lgpl.txt" todir="${dist.complete}"/>
		<copy todir="${dist.complete.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.lib}">
				<patternset refid="pellet-jars" />
			</fileset>
		</copy>
	</target>
	
	<target name="create-wsml2reasoner-pellet-jar+libs+example" depends="create-wsml2reasoner-pellet-jar+libs" 
		description="Zips wsml2reasoner-pellet jar, libs, and example">
		<copy file="${example.dir}/PelletReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/wsml2owlExample.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/simpleOntology.wsml" todir="${dist.complete.example}"/>
		<zip destfile="${dist}/wsml2reasoner-pellet-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-pellet-src" depends="create-wsml2reasoner-pellet-jar+libs" 
		description="Creates/zips wsml2reasoner src with pellet jars)">
		<mkdir dir="${dist.complete.src}" />
		<copy todir="${dist.complete.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.src}">
				<patternset refid="pellet-files" />	
			</fileset>
		</copy>
		<zip destfile="${dist}/wsml2reasoner-pellet-src-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-datalog-jar+libs" depends="compile" 
		description="Creates wsml2reasoner-datalog jar + libs">
		<mkdir dir="${dist.complete}" />	
		<jar jarfile="${dist.complete}/wsml2reasoner-datalog-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
		<copy file="${basedir}/license-lgpl.txt" todir="${dist.complete}"/>
		<copy todir="${dist.complete.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.lib}">
				<patternset refid="minimal-wsmo-jars" />
			</fileset>
		</copy>
	</target>
	
	<target name="create-wsml2reasoner-datalog-jar+libs+example" depends="create-wsml2reasoner-datalog-jar+libs" 
		description="Zips wsml2reasoner-datalog jar, libs, and example">
		<copy file="${example.dir}/ReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/humanOntology.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/simpleOntology.wsml" todir="${dist.complete.example}"/>
		<zip destfile="${dist}/wsml2reasoner-datalog-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
		
	<target name="create-wsml2reasoner-datalog-src" depends="create-wsml2reasoner-datalog-jar+libs" 
		description="Creates/zips wsml2reasoner src with datalog jars)">
		<mkdir dir="${dist.complete.src}" />
		<copy todir="${dist.complete.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.src}">
				<patternset refid="datalog-files" />	
			</fileset>
		</copy>
		<zip destfile="${dist}/wsml2reasoner-datalog-src-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-iris-jar+libs" depends="compile" 
		description="Creates wsml2reasoner-datalog-iris jar + libs">
		<mkdir dir="${dist.complete}" />	
		<jar jarfile="${dist.complete}/wsml2reasoner-datalog-iris-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
		<copy file="${basedir}/license-lgpl.txt" todir="${dist.complete}"/>
		<copy todir="${dist.complete.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.lib}">
				<patternset refid="iris-jars" />
			</fileset>
		</copy>
	</target>
	
	<target name="create-wsml2reasoner-iris-jar+libs+example" depends="create-wsml2reasoner-iris-jar+libs" 
		description="Zips wsml2reasoner-iris jar, libs, and example">
		<copy file="${example.dir}/ReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/IrisDBReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/IrisReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/humanOntology.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/simpleOntology.wsml" todir="${dist.complete.example}"/>
		<zip destfile="${dist}/wsml2reasoner-iris-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-iris-src" depends="create-wsml2reasoner-iris-jar+libs" 
		description="Creates/zips wsml2reasoner src with iris jars)">
		<mkdir dir="${dist.complete.src}" />
		<copy todir="${dist.complete.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.src}">
				<patternset refid="iris-files" />	
			</fileset>
		</copy>
		<zip destfile="${dist}/wsml2reasoner-iris-src-lgpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-mins-jar+libs" depends="compile" 
		description="Creates wsml2reasoner-mins jar + libs">
		<mkdir dir="${dist.complete}" />	
		<jar jarfile="${dist.complete}/wsml2reasoner-mins-${deploy.version}.jar">
			<fileset dir="${build.src}" />
			<fileset dir="${build.class}" />
		</jar>
		<copy file="${basedir}/license-gpl.txt" todir="${dist.complete}"/>
		<copy todir="${dist.complete.lib}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.lib}">
				<patternset refid="mins-jars" />
			</fileset>
		</copy>
	</target>
	
	<target name="create-wsml2reasoner-mins-jar+libs+example" depends="create-wsml2reasoner-mins-jar+libs" 
		description="Zips wsml2reasoner-datalog jar, libs, and example">
		<copy file="${example.dir}/ReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/MinsReasonerExample.java" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/humanOntology.wsml" todir="${dist.complete.example}"/>
		<copy file="${example.dir}/simpleOntology.wsml" todir="${dist.complete.example}"/>
		<zip destfile="${dist}/wsml2reasoner-mins-gpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-mins-src" depends="create-wsml2reasoner-mins-jar+libs" 
		description="Creates/zips wsml2reasoner src with mins jars)">
		<mkdir dir="${dist.complete.src}" />
		<copy todir="${dist.complete.src}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${build.src}">
				<patternset refid="mins-files" />	
			</fileset>
		</copy>
		<zip destfile="${dist}/wsml2reasoner-mins-src-gpl-${deploy.version}.zip">
			<fileset dir="${dist.complete}"/>
		</zip>
		<delete dir="${dist.complete}"/>
	</target>
	
	<target name="create-wsml2reasoner-releases-bins" depends="compile, 
		create-wsml2reasoner-noncom-jar+libs+example, 
		create-wsml2reasoner-mins-jar+libs+example, 
		create-wsml2reasoner-iris-jar+libs+example,
		create-wsml2reasoner-datalog-jar+libs+example, 
		create-wsml2reasoner-dl-jar+libs+example,
		create-wsml2reasoner-pellet-jar+libs+example, 
		create-wsml2reasoner-jar+libs+example" 
		description="Creates/zips wsml2reasoner bins)">
	</target>
	
	<target name="create-wsml2reasoner-releases-srcs" depends="create-wsml2reasoner-noncom-src, create-wsml2reasoner-mins-src, 
		create-wsml2reasoner-iris-src, create-wsml2reasoner-datalog-src, create-wsml2reasoner-dl-src,
		create-wsml2reasoner-pellet-src, create-wsml2reasoner-src" description="Creates/zips wsml2reasoner srcs">
	</target>
	
	<target name="create-wsml2reasoner-releases" depends="create-wsml2reasoner-releases-bins,create-wsml2reasoner-releases-srcs" 
		description="Creates/zips wsml2reasoner)">
	</target>

	<target name="create-javadoc" depends="compile" description="Produces javadoc">
		<delete dir="${javadoc.dir}" />
		<mkdir dir="${javadoc.dir}" />
		<javadoc destdir="${javadoc.dir}"
             classpathref="classpath"
             author="true"
             version="true"
             use="true"
             windowtitle="WSML2Reasoner Framework">
			<fileset dir="${build.src}">
				<include name="**/*.java" />
			</fileset>
			<link href="http://wsmo4j.sourceforge.net/multiproject/wsmo-api/apidocs/"
            packagelistloc="http://wsmo4j.sourceforge.net/multiproject/wsmo-api/apidocs/package-list" />
			<link href="http://wsmo4j.sourceforge.net/multiproject/logexp-api/apidocs/"
            packagelistloc="http://wsmo4j.sourceforge.net/multiproject/logexp-api/apidocs/package-list" />
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"
            packagelistloc="http://java.sun.com/j2se/1.5.0/docs/api/package-list" />
			<doctitle><![CDATA[<h1>WSML2Reasoner Framework  v${deploy.version}</h1>]]></doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2005 University of Innsbruck, Austria; FZI, Germany. All Rights Reserved.</i>]]></bottom>
			<tag name="TODO" scope="all" description="To do:" />
		</javadoc>
	</target>

	<target name="get-jsse-4-ssh+scp"
          description="Download necessary jar for ssh/scp and place directly into ant lib">
		<get dest="${ant.library.dir}/jsch-0.1.32.jar"
         src="http://puzzle.dl.sourceforge.net/sourceforge/jsch/jsch-0.1.32.jar" />
	</target>

	<target name="choose-user-password">
		<input message="Username for ${shell.host}:" addproperty="ssh.user" />
		<input message="Password for ${shell.host}:" addproperty="ssh.password" />
	</target>

	
	<!-- Redo these -->
	
	<target name="update_remote_snapshot_wsml2reasoner"
		depends="create-wsml2reasoner-noncom-jar+libs"
        description="Updates wsml2reasoner (jar + src) snapshot on tools.deri.org">

		<!--delete old snapshot
		<sshexec host="${shell.host}"
        	username="${ssh.user}"
            password="${ssh.password}"
            trust="yes"
            command="rm -f ${remote.snapshot.path}/wsml2reasoner*" />
		-->
		<!--upload snapshot-->
		<scp file="${dist.complete}/wsml2reasoner-noncom-${deploy.version}.jar"
			trust="yes"
         	todir="${ssh.user}:${ssh.password}@${shell.host}:${remote.snapshot.path}" 
		/>

		<scp file="${dist}/wsml2reasoner-noncom-${deploy.version}.zip"
         	trust="yes"
         	todir="${ssh.user}:${ssh.password}@${shell.host}:${remote.snapshot.path}" 
		/>
		<delete dir="${dist.complete}"/>
		
		<!--
		<scp file="${basedir}/license.txt"
         	trust="yes"
         	todir="${ssh.user}:${ssh.password}@${shell.host}:${remote.snapshot.path}" />
         -->
		
	</target>
	
	<target name="update_remote_snapshot_wsml2reasoner-wsmo"
		depends="create-wsml2reasoner-jar+libs"
        description="Updates wsml2reasoner-minimal (wsmo jar+lib+example) snapshot on tools.deri.org">
		<!--delete old snapshot
		<sshexec host="${shell.host}"
        	username="${ssh.user}"
            password="${ssh.password}"
            trust="yes"
            command="rm -f ${remote.snapshot.path.wsmo}/wsml2reasoner-wsmo*" />
		-->
		<!--upload snapshot-->
		<scp file="${dist.complete}/wsml2reasoner-${deploy.version}.jar"
					trust="yes"
		         	todir="${ssh.user}:${ssh.password}@${shell.host}:${remote.snapshot.path.wsmo}" 
		/>
		
		<scp file="${dist}/wsml2reasoner-${deploy.version}.zip"
		         	trust="yes"
		         	todir="${ssh.user}:${ssh.password}@${shell.host}:${remote.snapshot.path.wsmo}" 
		/>
	</target>

	<target name="update_remote_javadoc"
          depends="create-javadoc"
          description="Updates wsml2reasoner javadoc on tools.deri.org">

		<!--delete old javadoc-->
		<sshexec host="${shell.host}"
        	username="${ssh.user}"
            password="${ssh.password}"
            trust="yes"
            command="rm -r -f ${remote.javadoc.path}/*" />

		<!--upload snapshot -->
		<scp trust="yes"
         	todir="${ssh.user}:${ssh.password}@${shell.host}:${remote.javadoc.path}" >
			<fileset dir="${javadoc.dir}" />
		</scp>
	</target>
  
    <path id="all">
        <fileset dir="${basedir}/lib" includes="**/*.jar"/>
    </path>

    <target name="performence-create-benchmark-files" depends="init">
        <javac srcdir="${basedir}/performance" destdir="${build.class}" classpathref="all" classpath="${build.class}" />
        <java  classname="performance.BenchmarkOntologyGenerator" classpathref="all" classpath="${build.class}" jvmargs="-Xmx 1024"/>
    </target>
  
    <target name="performence-run-benchmark" depends="init">
        <java  classname="performance.TestPerformanceWithUseOfFeatures" classpathref="all" classpath="${build.class}" jvmargs="-Xmx 1024"/>
    </target>

    <target name="performence-run-chart" depends="init">
        <java  classname="performance.chart.Chart" classpathref="all" classpath="${build.class}" jvmargs="-Xmx 1024"/>
    </target>
  
</project>