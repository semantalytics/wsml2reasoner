<?xml version="1.0" encoding="ISO-8859-1"?>
	
<project name="WSML2Reasoner Framework" default="wsml2reasoner" basedir="." >

	<property file="build.properties" />
	
	<patternset id="java-source-files">
		<include name="**/*.java" />
	</patternset>
			
	<patternset id="java-source-files">
		<include name="**/*.java" />
	</patternset>

	<patternset id="lgpl-jars">
		<exclude name="**/kaon2-reasoner/" />
		<exclude name="**/mins-reasoner/" />
	</patternset>

	<patternset id="gpl-jars">
		<exclude name="**/kaon2-reasoner/" />
	</patternset>

	<patternset id="proprietary-jars">
		<exclude name="**/kaon2-reasoner/" />
	</patternset>

	<!-- =================================================================== -->
	<!-- Targets                                                       		 -->
	<!-- =================================================================== -->

	<target name="run-all-tests" description="Run all tests" depends="unit-test, functional-test" />
	
	<target name="build-all-releases" depends="release-lgpl, release-gpl, release-proprietary" description="Build all release zip files" /> 

	<target name="get-kaon2" depends="init" description="Download the KAON2 jar file.">

		<fail message="Kaon2 jar already present: ${file.kaon2}" if="kaon2.jar.present" />
		
		<input message="KAON2 is is free of charge for universities for noncommecial academic usage (national laboratories are not considered universities). For commercial purposes, there is a commercial version of KAON2 called OntoBroker OWL (http://www.ontoprise.de/ontobrokerowl). By downloading KAON2, you accept these license agreements. Continue? (Y/N)" 
		    validargs="Y,N" addproperty="get.kaon2" />

		<condition property="not.get.kaon2">
			<equals arg1="N" arg2="${get.kaon2}"/>
		</condition>

		<fail message="Aborted by user" if="not.get.kaon2" />
		<mkdir dir="${dir.kaon2}"/>

		<get src="http://tools.deri.org/wsml2reasoner/ext/kaon2/kaon2.jar" dest="${file.kaon2}"/>
		<get src="http://tools.deri.org/wsml2reasoner/ext/kaon2/read_me.txt" dest="${dir.kaon2}/read_me.txt"/>

		<echo message="The KAON2 jar file has been downlaoded to ${file.kaon2} - you must now manually add this to your build path." />
	</target>

	<target name="init">
		<!-- Set the DSTAMP, TSTAMP and TODAY properties -->
		<tstamp />
	
		<!-- Set the property "kaon2.jar.present" if the kaon2.jar is present -->
		<available file="${file.kaon2}" property="kaon2.jar.present"/>
		
	</target>

	<target name="clean" depends="init" description="Removes parent build directory">
		<delete dir="${dir.build}" />
	</target>

	<target name="compile" depends="init" description="Compiles wsml2reasoner src and api files">

		<delete dir="${dir.classes}" />
		<mkdir dir="${dir.classes}" />

		<copy todir="${dir.classes}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${dir.src}">
				<patternset refid="java-source-files" />
				<exclude name="${package.example}/*.java" />
			</fileset>
			<fileset dir="${dir.api}">
				<patternset refid="java-source-files" />
			</fileset>
		</copy>
		
		<javac srcdir="${dir.classes}" destdir="${dir.classes}" deprecation="on" debug="on" >
			<compilerarg value="-Xlint:unchecked" compiler="modern" />
			<compilerarg value="-Xlint:unchecked" compiler="classic" />
			<classpath>
				<fileset dir="${dir.lib}" />
			</classpath>
		</javac>
	</target>

	<target name="wsml2reasoner" depends="compile" description="Creates wsml2reasoner jar">
		<mkdir dir="${dir.jar}" />
		<jar jarfile="${file.jar}">
			<fileset dir="${dir.classes}" />
		</jar>
	</target>
	
	<target name="compile-proprietary" depends="compile" description="Compiles wsml2reasoner propietary facade files">
		<fail message="Can not compile proprietary facade classes without the proprietary " unless="kaon2.jar.present" />
		
		<delete dir="${dir.classes.proprietary}" />
		<mkdir dir="${dir.classes.proprietary}" />

		<copy todir="${dir.classes.proprietary}" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${dir.src.proprietary}">
				<patternset refid="java-source-files" />
			</fileset>
		</copy>
		
		<javac srcdir="${dir.classes.proprietary}" destdir="${dir.classes.proprietary}" deprecation="on" debug="on">
			<compilerarg value="-Xlint:unchecked" compiler="modern" />
			<compilerarg value="-Xlint:unchecked" compiler="classic" />
			<classpath>
				<pathelement location ="${dir.classes}" />
				<fileset dir="${dir.lib}" />
			</classpath>
		</javac>
	</target>
	
	<target name="wsml2reasoner-proprietary" depends="wsml2reasoner-proprietary-build, wsml2reasoner-proprietary-not-build" description="Decide whether to build proprietary facade classes jar file" />

	<target name="wsml2reasoner-proprietary-not-build" description="Display message that proprietary facade jar is being skipped" unless="kaon2.jar.present">
		<echo message="**** Skipping building proprietary reasoner facade classes jar file ${file.jar.proprietary} ****" />
	</target>

	<target name="wsml2reasoner-proprietary-build" description="Creates wsml2reasoner proprietary extension jar" if="kaon2.jar.present">
		<!-- Find a better way to do this.
			If these are dependencies, then they are executed even if the if="..." part
			causes this target to not execute.
			However, if this task does execuite then the followinf 2 tasks are executed twice. -->
		<antcall target="wsml2reasoner" />
		<antcall target="compile-proprietary" />
		
		<mkdir dir="${dir.jar}" />
		<jar jarfile="${file.jar.proprietary}">
			<fileset dir="${dir.classes.proprietary}" />
		</jar>
	</target>
	
	<target name="javadoc" depends="compile" description="Generate the javadoc">
		<delete dir="${dir.javadoc}" />
		<mkdir dir="${dir.javadoc}" />
		<javadoc destdir="${dir.javadoc}"
             classpath ="${dir.lib}"
             author="true"
             version="true"
             use="true"
			 link="http://java.sun.com/j2se/1.5.0/docs/api/"
			 windowtitle = "WSML2Reasoner Framework">
			<fileset dir="${dir.classes}">
				<patternset refid="java-source-files" />
			</fileset>
			<doctitle><![CDATA[<h1>WSML2Reasoner Framework</h1>]]></doctitle>
			<bottom>
				<![CDATA[<i>Copyright &#169; 2008 University of Innsbruck, Austria; FZI, Germany. All Rights Reserved.</i>]]>
			</bottom>
			<tag name="TODO" scope="all" description="To do:" />
		</javadoc>
	</target>

	<target name="javadoc-zip" depends="javadoc" description="Creates a zip file containing all the javadoc">
		<mkdir dir="${dir.javadoc.zip}" />
		<delete file="${file.javadoc.zip}" />
		<zip destfile="${file.javadoc.zip}">
			<fileset dir="${dir.javadoc}"/>
		</zip>
	</target>

	<target name="source-zip" depends="compile" description="Creates a zip file containing all the source code">
		<mkdir dir="${dir.src.zip}" />
		<delete file="${file.src.zip}" />
		<zip destfile="${file.src.zip}">
			<fileset dir="${dir.classes}">
				<patternset refid="java-source-files" />
			</fileset>
		</zip>
	</target>

	<target name="release-lgpl" depends="wsml2reasoner, source-zip, javadoc-zip" 
		description="Creates wsml2reasoner jar + L-GPL libraries only">
		
		<mkdir dir="${dir.release}" />
		<delete file="${file.release.lgpl}" />

		<zip destfile="${file.release.lgpl}">
			<fileset file="${file.jar}"/>
			
			<zipfileset dir="${dir.lib}" prefix="${dir.lib}">
				<patternset refid="lgpl-jars"/>
			</zipfileset>
			
			<fileset file="${file.src.zip}"/>
			<fileset file="${file.javadoc.zip}"/>
			
			<fileset dir="${basedir}" file="${license.lgpl}" />
		</zip>
	</target>

	<target name="release-gpl" depends="wsml2reasoner, source-zip, javadoc-zip" 
		description="Creates wsml2reasoner jar + L-GPL and GPL libraries only">
		
		<mkdir dir="${dir.release}" />
		<delete file="${file.release.gpl}" />

		<zip destfile="${file.release.gpl}">
			<fileset file="${file.jar}"/>
			
			<zipfileset dir="${dir.lib}" prefix="${dir.lib}">
				<patternset refid="gpl-jars"/>
			</zipfileset>
			
			<fileset file="${file.src.zip}"/>
			<fileset file="${file.javadoc.zip}"/>
			
			<fileset dir="${basedir}" includes ="${license.lgpl}" />
			<fileset dir="${basedir}" includes ="${license.gpl}" />
		</zip>
	</target>

	<target name="release-proprietary" depends="wsml2reasoner, wsml2reasoner-proprietary, source-zip, javadoc-zip" 
		description="Creates wsml2reasoner jar + L-GPL, GPL and propreietary libraries" if="kaon2.jar.present">
		
		<mkdir dir="${dir.release}" />
		<delete file="${file.release.proprietary}" />

		<zip destfile="${file.release.proprietary}">
			<fileset file="${file.jar}"/>
			<fileset file="${file.jar.proprietary}"/>
			
			<zipfileset dir="${dir.lib}" prefix="${dir.lib}">
				<patternset refid="proprietary-jars"/>
			</zipfileset>
			
			<fileset file="${file.src.zip}"/>
			<fileset file="${file.javadoc.zip}"/>
			
			<fileset dir="${basedir}" includes ="${license.lgpl}" />
			<fileset dir="${basedir}" includes ="${license.gpl}" />
		</zip>
	</target>
	

	<target name="compile-unit-test" description="Compile the unit test classes" depends="wsml2reasoner, wsml2reasoner-proprietary">

		<delete dir="${dir.classes.unit.test}" />
		<mkdir dir="${dir.classes.unit.test}" />

		<javac srcdir="${dir.src.unit.test}" destdir="${dir.classes.unit.test}" deprecation="on">
			<compilerarg value="-Xlint:unchecked" compiler="modern" />
			<compilerarg value="-Xlint:unchecked" compiler="classic" />
			<include name="**/*.java" />
			<classpath>
				<fileset dir="${dir.lib}" />
				<fileset dir="${dir.jar}" />
			</classpath>
		</javac>
	</target>

	<target name="compile-functional-test" description="Compile the functional test classes" depends="wsml2reasoner, wsml2reasoner-proprietary">

		<delete dir="${dir.classes.functional.test}" />
		<mkdir dir="${dir.classes.functional.test}" />

		<javac srcdir="${dir.src.functional.test}" destdir="${dir.classes.functional.test}" deprecation="on">
			<compilerarg value="-Xlint:unchecked" compiler="modern" />
			<compilerarg value="-Xlint:unchecked" compiler="classic" />
			<include name="**/*.java" />
			<classpath>
				<fileset dir="${dir.lib}" />
				<fileset dir="${dir.jar}" />
			</classpath>
		</javac>
	</target>

	<target name="unit-test" description="Execute all unit tests" depends="compile-unit-test">
		<delete dir="${dir.unit.test.reports}" />
		<mkdir dir="${dir.unit.test.reports}" />

			<junit showoutput="true" printsummary="true" fork="yes">
			<jvmarg value="-ea"/>
			<classpath>
				<fileset dir="${dir.lib}" />
				<fileset dir="${dir.jar}" />
				<dirset dir="${dir.classes.unit.test}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${dir.unit.test.reports}">
				<fileset dir="${dir.src.unit.test}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
		<mkdir dir="${dir.unit.test.reports}" />
		<junitreport todir="${dir.unit.test.reports}">
			<fileset dir="${dir.unit.test.reports}">
				<include name="TEST-*Test.xml" />
			</fileset>
			<report format="frames" todir="${dir.unit.test.reports}">
				<param name="TITLE" expression="Unit Test Report" />
			</report>
		</junitreport>
	</target>

	<target name="functional-test" description="Execute all functional tests" depends="compile-functional-test">
		
		<delete dir="${dir.functional.test.reports}" />
		<mkdir dir="${dir.functional.test.reports}" />

		<junit showoutput="true" printsummary="true" fork="yes">
			<jvmarg value="-ea"/>
			<classpath>
				<fileset dir="${dir.lib}" />
				<fileset dir="${dir.jar}" />
				<dirset dir="${dir.classes.functional.test}" />
				<!-- Ths line makes the wsml ontology files available to the tests via the class loader-->
				<dirset dir="${dir.src.functional.test}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${dir.functional.test.reports}">
				<fileset dir="${dir.src.functional.test}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
		<mkdir dir="${dir.functional.test.reports}" />
		<junitreport todir="${dir.functional.test.reports}">
			<fileset dir="${dir.functional.test.reports}">
				<include name="TEST-*Test.xml" />
			</fileset>
			<report format="frames" todir="${dir.functional.test.reports}">
				<param name="TITLE" expression="Functional Test Report" />
			</report>
		</junitreport>
	</target>

</project>
