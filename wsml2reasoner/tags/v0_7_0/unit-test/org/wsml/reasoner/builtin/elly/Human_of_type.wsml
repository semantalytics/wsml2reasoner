namespace {_"http://www.example.org/example/",
    dc _"http://purl.org/dc/elements/1.1#",
    xsd _"http://www.w3.org/2001/XMLSchema#",
    wsml _"http://www.wsmo.org/2004/wsml",
    loc _"http://www.example.org/loc#",
    oo _"http://www.example.org/oo#",
    foaf _"http://www.example.org/foaf#"}

ontology _"http://www.example.org/ontologies/example"

      /*
       * This Concept illustrates the use of different styles of
       * attributes.
       */
      concept Human
            hasName			impliesType foaf#name
            hasRelative		impliesType Human
            hasAncestor		impliesType Human
            hasParent		impliesType Human
  			hasMother		impliesType FemaleHuman
  			hasMother		impliesType Mother
            hasWeightInKG	ofType xsd#float
            hasBirthdate	ofType xsd#date
            dateOfDeath		ofType xsd#date
            hasBirthplace	impliesType loc#location
            isMarriedTo		impliesType Human
            hasCitizenship	impliesType oo#country
            isAlive			ofType xsd#boolean
	                        annotations
	                              dc#relation hasValue {IsAlive}
	                        endAnnotations
                        
		axiom MotherSubParent
			definedBy
				?x[hasMother hasValue ?y] implies ?x[hasParent hasValue ?y].

		axiom MotherSubMum
			definedBy
				?x[hasMother hasValue ?y] implies ?x[hasMum hasValue ?y].

		axiom MumSubMother
			definedBy
				?x[hasMum hasValue ?y] implies ?x[hasMother hasValue ?y].

		axiom ParentSubAncestor
			definedBy
				?x[hasParent hasValue ?y] implies ?x[hasAncestor hasValue ?y].

		axiom AncestorSubRelative
			definedBy
				?x[hasAncestor hasValue ?y] implies ?x[hasRelative hasValue ?y].

		axiom MarriedSubRelative
			definedBy
				?x[isMarriedTo hasValue ?y] implies ?x[hasRelative hasValue ?y].

		axiom ChildSubRelative
			definedBy
				?x[hasChild hasValue ?y] implies ?x[hasRelative hasValue ?y].

		axiom ChildTransitive
			definedBy
				?x[hasChild hasValue ?y] and ?y[hasChild hasValue ?z]  implies ?x[hasRelative hasValue ?z].

      concept FemaleHuman
      concept Mother subConceptOf FemaleHuman
      concept SingleWoman subConceptOf FemaleHuman
      concept HappyMother subConceptOf Mother


      concept Man subConceptOf Human
            annotations
                  dc#relation hasValue ManDisjointWoman
            endAnnotations

      concept Woman subConceptOf Human
            annotations
                  dc#relation hasValue ManDisjointWoman
            endAnnotations

      /*
       * Illustrating general disjointness between two classes
       * via a constraint
       */
      axiom ManDisjointWoman
            definedBy
                  !- ?x memberOf Man and ?x memberOf Woman.

      /*
       * Refining a concept and restricting an existing attribute
       */
      concept Parent subConceptOf Human
            annotations
                  dc#description hasValue "Human with at least one child"
            endAnnotations
            hasChild impliesType Human

      /*
       * Using an axiom to define class membership and an additional
       * axiom as constraint
       */
      concept Child subConceptOf Human
            annotations
                  dc#relation hasValue { ChildDef, ValidChild }
            endAnnotations

      /*
       * Defining complete subclasses by use of axioms
       */
      concept Girl subConceptOf Woman
            annotations
                  dc#relation hasValue CompletenessOfChildren
            endAnnotations

      concept Boy
            annotations
                  dc#relation hasValue {ABoy,CompletenessOfChildren}
            endAnnotations

      /*
       * This axiom implies that Boy is a Man and a Child and every Man which
       * is also a Child is a Boy
       */
      axiom ABoy
            definedBy
                  ?x memberOf Boy equivalent ?x memberOf Man and ?x memberOf Child.

      instance Mary memberOf {Parent, Woman}
            annotations
                  dc#description hasValue "Mary is parent of the twins Paul and Susan"
            endAnnotations
            hasName hasValue "Maria Smith"
            hasBirthdate hasValue xsd#date(1949,09,12)
            hasChild hasValue { Paul, Susan }

      instance Paul memberOf { Parent, Man }
            hasName hasValue "Paul Smith"
            hasBirthdate hasValue xsd#date(1976,08,16)
            hasChild hasValue George
            hasCitizenship hasValue oo#de

      instance Susan memberOf Woman
            hasName hasValue "Susan Jones"
            hasBirthdate hasValue xsd#date(1976,08,16)

       /*
        * This will be automatically an instance of Boy, since George is a
        * Man younger than 14.
        */
      instance George memberOf Man
            hasName hasValue "George Smith"
            /*hasAncestor hasValue Mary - can be inferred from the rest of this example */
            hasWeighthasWeightInKG hasValue 3.52
            hasBirthdate hasValue xsd#date(1977,10,21)
            
